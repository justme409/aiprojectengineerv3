// Prisma schema for ProjectPro
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Existing ProjectPro tables (read-only compatibility)
model Organization {
  id        String   @id @default(uuid())
  name      String
  domain    String?
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("organizations")
}

model Project {
  id              String   @id @default(uuid())
  name            String
  description     String?
  location        String?
  clientName      String?
  createdByUserId String?
  status          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  organizationId  String
  settings        Json     @default("{}")

  @@map("projects")
}

model Asset {
  id                   String   @id @default(uuid())
  assetUid             String
  version              Int
  isCurrent            Boolean  @default(true)
  supersedesAssetId    String?
  versionLabel         String?
  effectiveFrom        DateTime?
  effectiveTo          DateTime?
  type                 String
  subtype              String?
  name                 String
  organizationId       String
  projectId            String?
  parentAssetId        String?
  documentNumber       String?
  revisionCode         String?
  pathKey              String?
  status               String   @default("draft")
  approvalState        String   @default("not_required")
  classification       String   @default("internal")
  idempotencyKey       String?
  metadata             Json     @default("{}")
  content              Json     @default("{}")
  dueSlaAt             DateTime?
  scheduledAt          DateTime?
  requestedForAt       DateTime?
  createdAt            DateTime @default(now())
  createdBy            String?
  updatedAt            DateTime @updatedAt
  updatedBy            String?
  isDeleted            Boolean  @default(false)

  @@map("assets")
}

model AssetEdge {
  id            String @id @default(uuid())
  fromAssetId   String
  toAssetId     String
  edgeType      String
  properties    Json   @default("{}")
  idempotencyKey String?
  createdAt     DateTime @default(now())

  @@map("asset_edges")
}
